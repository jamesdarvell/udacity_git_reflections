=======================================
What happens when you initialize a 
repository? Why do you need to do it?
=======================================

When I initialize a repo, git sets up all
the files and directories required to 
maintain the state of the repo

=======================================
How is the staging area different from the working directory and the
repository? What value do you think it offers?
=======================================

The staging area is a list of files which have changed as a result of the most
recent logical changes, and will be added to the repository.  The repository
is composed of all the changes that have already been commited over time.

The working directory contains the current state of the project.

The benefit of the staging area is that it helps to make logical commits.

=======================================
How can you use the staging area to make sure you have one commit per logical
change?
=======================================

I can check with git diff before I commit to ensure all the changes only
relate to a single change.

=======================================
What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
=======================================

When I am working on new features or bug fixes, any time I need to divert from
the main thrust of the effort of whatever I am working on.

=======================================
How do the diagrams help you visualize the branch structure?
=======================================

The diagrams help me to understand how the commits in the different branches
relate to each other.

=======================================
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
=======================================

The result is that the changes introduced in both of the branches are made
available in the files of the project.  This is shown in the diagram as two
streams converging.

=======================================
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
=======================================

pros:
   Less time consuming
   eliminates human error
   allows testing before commit

cons:
   Can cause conflicts over non-problems
